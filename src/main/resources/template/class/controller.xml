<?xml version="1.0" encoding="utf-8"?>
<template>
       <name>Model</name>
       <filePath>src/main/java/${packageName}/${moduleName}/controller</filePath>
       <fileName>${ClassName}Controller.java</fileName>
       <content><![CDATA[
/** 
 * Copyright ® 2016-${currentYear} zeal  1332949188@qq.com.
 * All right reserved. 
 */
package ${packageName}.${moduleName}.controller;


import com.wordnik.swagger.annotations.ApiOperation;
import com.zeal.shiyulin.common.Result;
import ${packagePaginateName}.PaginateDataResponse;
import ${packageName}.${moduleName}.entity.${ClassName}Entity;
import ${packageName}.${moduleName}.service.${ClassName}Service;
import ${packageExceptionName}.ExceptionUtils;
import ${packageExceptionName}.ZealException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.Map;

/**
 * ${functionName}Rest服务接口
 *
 * @author ${functionAuthor}
 * @date ${functionVersion}
 */
@RestController
@RequestMapping(value="${ClassName?uncap_first}")
public class ${ClassName}Controller {

    @Autowired
    ${ClassName}Service ${ClassName?uncap_first}Service;

    /**
     * 通过ID查找对象
     * @author ${functionAuthor}
     * @date ${functionVersion}
     */
    @ApiOperation(value = "通过ID查找对象[对象]", response=${ClassName}Entity.class, notes = "通过ID查找对象")
    @RequestMapping(value="/findById/{id}",method = RequestMethod.GET)
    public Result findById(@PathVariable String id,HttpServletRequest request,
                                            HttpServletResponse response){
        try{
            return new Result(${ClassName?uncap_first}Service.findById(id));
        }
        catch(Exception er) {
            ExceptionUtils.LoadLog(er);
            throw new ZealException("系统异常");
        }
    }

    /**
     * 通过Class查找对象
     * @author ${functionAuthor}
     * @date ${functionVersion}
     */
    @ApiOperation(value = "通过Class查找对象[List]", response=${ClassName}Entity.class, notes = "通过Class查找对象")
    @RequestMapping(value="/findByClass",method = RequestMethod.POST)
    public Result findByClass(@RequestBody ${ClassName}Entity ${ClassName?uncap_first}Entity,
                                            HttpServletRequest request,HttpServletResponse response){
        try{
            return new Result(${ClassName?uncap_first}Service.findByClass(${ClassName?uncap_first}Entity));
        }
        catch(Exception er) {
            ExceptionUtils.LoadLog(er);
            throw new ZealException("系统异常");
        }
    }

    /**
     * 通过Class分页查找对象
     * @author ${functionAuthor}
     * @date ${functionVersion}
     */
    @ApiOperation(value = "通过Class分页查找对象[分页]", response=${ClassName}Entity.class, notes = "通过Class分页查找对象")
    @RequestMapping(value="/findByClassWithPaginate",method = RequestMethod.POST)
    public PaginateDataResponse findByClassWithPaginate(@RequestParam Map<String,String> allRequestParam,
                                                        @RequestBody ${ClassName}Entity ${ClassName?uncap_first}Entity,
                                                        HttpServletRequest request, HttpServletResponse response){

        try{
            if(allRequestParam.containsKey("size")){
                ${ClassName?uncap_first}Entity.setSize(Integer.valueOf(allRequestParam.get("size")));
            }
            if(allRequestParam.containsKey("start")){
                ${ClassName?uncap_first}Entity.setStart(Integer.valueOf(allRequestParam.get("start")));
            }
            if(allRequestParam.containsKey("order")){
                ${ClassName?uncap_first}Entity.setOrder(String.valueOf(allRequestParam.get("order")));
            }
            if(allRequestParam.containsKey("sort")){
                ${ClassName?uncap_first}Entity.setSort(String.valueOf(allRequestParam.get("sort")));
            }
            return new Result(${ClassName?uncap_first}Service.listPage(${ClassName?uncap_first}Entity));
        }
        catch(Exception er){
            ExceptionUtils.LoadLog(er);
            throw new ZealException("系统异常");
        }
    }

    /**
     * 通过url参数查找分页对象
     * @author ${functionAuthor}
     * @date ${functionVersion}
     */
    @ApiOperation(value = "通过url参数查找分页对象[分页]", response=${ClassName}Entity.class, notes = "通过url参数查找分页对象")
    @RequestMapping(value="/findByClassWithPaginate",method = RequestMethod.GET)
    public PaginateDataResponse findByClassWithPaginate(@RequestParam Map<String,String> allRequestParam,
                                                        HttpServletRequest request, HttpServletResponse response){

        try{
            ${ClassName}Entity ${ClassName?uncap_first}Entity = new ${ClassName}Entity(allRequestParam);
            return new Result(${ClassName?uncap_first}Service.listPage(${ClassName?uncap_first}Entity));
        }
        catch(Exception er){
            ExceptionUtils.LoadLog(er);
            throw new ZealException("系统异常");
        }
    }

    /**
     * 新增记录
     * @author ${functionAuthor}
     * @date ${functionVersion}
     */
    @ApiOperation(value = "新增记录[对象]", response=${ClassName}Entity.class, notes = "新增记录")
    @RequestMapping(value="/insert",method = RequestMethod.POST)
    public Result insert(@RequestBody ${ClassName}Entity ${ClassName?uncap_first}Entity,HttpServletRequest request,
                       HttpServletResponse response){
        try{
              return  new Result(${ClassName?uncap_first}Service.insert(${ClassName?uncap_first}Entity));
        }
        catch(Exception er) {
            ExceptionUtils.LoadLog(er);
            throw new ZealException("系统异常");
        }
    }

    /**
     * 更新数据
     * @author ${functionAuthor}
     * @date ${functionVersion}
     */
    @ApiOperation(value = "更新数据[对象]", response=${ClassName}Entity.class, notes = "更新数据")
    @RequestMapping(value="/update",method = RequestMethod.POST)
    public Result update(@RequestBody ${ClassName}Entity ${ClassName?uncap_first}Entity,HttpServletRequest request,
                       HttpServletResponse response){
        try{
            return new Result(${ClassName?uncap_first}Service.update(${ClassName?uncap_first}Entity));
        }
        catch(Exception er) {
            ExceptionUtils.LoadLog(er);
            throw new ZealException("系统异常");
        }
    }

    /**
     * 通过Class删除信息
     * @author ${functionAuthor}
     * @date ${functionVersion}
     */
    @ApiOperation(value = "通过Class删除信息[int]", response=Integer.class, notes = "通过Class删除信息")
    @RequestMapping(value="/delete",method = RequestMethod.POST)
    public Result delete(@RequestBody ${ClassName}Entity ${ClassName?uncap_first}Entity,HttpServletRequest request,
                       HttpServletResponse response){
        try{
             return new Result(${ClassName?uncap_first}Service.delete(${ClassName?uncap_first}Entity));
        }
        catch(Exception er) {
            ExceptionUtils.LoadLog(er);
            throw new ZealException("系统异常");
        }
    }

    /**
     * 通过ID删除信息
     * @author ${functionAuthor}
     * @date ${functionVersion}
     */
    @ApiOperation(value = "通过ID删除信息[int]", response=Integer.class, notes = "通过ID删除信息")
    @RequestMapping(value="/deleteById/{id}",method = RequestMethod.POST)
    public Result deleteById(@PathVariable String id,HttpServletRequest request,
                       HttpServletResponse response){
        try{
            return new Result(${ClassName?uncap_first}Service.deleteById(id));
        }
        catch(Exception er) {
            ExceptionUtils.LoadLog(er);
            throw new ZealException("系统异常");
        }
    }
}]]>
       </content>
</template>